I used the wireframe diagram to loosely plan the project. I knew that I would want it to be a flexbox layout, so I went with a column format. The idea was to have each of the recipes flow from top to bottom in a column, and to display the ingredients, instructions, and demonstration (or result), in that specific order. Within each column I also wanted to try some creative div usage and style the page in such a way that it appeared that the components of each column were conencted by a solid line. I ended up making this solid line much thicker than my wireframe diagram mockup, as the thinner line didn't look as good on the page. Lastly, I wanted a title div above the flexbox with the recipes, but below the navigation. 

On the recipes page, I used a flexbox to contain the columns, which in turn had the recipes within. I wanted to make sure that the page was responsive, so utilizing the flexbox was important to ensure that the columns would alter themselves and work with the page. I also made sure to contain each column within an outer div, so that the components within each column (ingredients, instructions, demonstration) stayed connected and didn't float around in the flexbox. A flexbox was also used on the bulletin page to contain the cards. These cards adapt to the page when it is resized.

Cards were used on the bulletin page to display the different web programming terms and definitions. This was a perfect way to display this data as it allowed the user to reveal the information when they choose to do so, rather than just showing everything on the page from the start. This works similar to flash cards.

Media queries are used on the page for two primary reasons: to ensure that the hamburger menu functions properly, and to alter the size of the title text on the recipe page. The 700 min width query sets up the hamburger menu. When the page is larger than 699px, the styling described takes effect, some of which hides the hamburger menu and menu cancel buttons. The styling also alters the display itself and the twitter link. The second media query, max width 899px, sets the font size for the page title on the recipes page to a smaller size when the screen is made smaller.

The hamburger menu relies on these media queries to change it's presentation depending on the size of the page. When the conditions of the queries are not met, the menu is displayed horizontally across the top. When the conditions are met, and the page is smaller, the hamburger menu icons are visible, and clicking on them is clicking on an anchor tag. Similarly, the menu choices are presented as list items that contain anchor tags, which link out to the other pages. This navigation code is the same on each of the three pages.

The LESS preprocessor is used for several simple variables, most promomently with the Purdue colors. Each of five different Purdue colors are delcared and used throughout all three of the pages. Some of these colors are then lightened as well. I've also taken some common clusters of styling and set up mixins: the .demoFormat mixin provides core information needed to create the column style, and is part of several different classes. Lastly, I've used nesting in a few places to isolate styling, such as the paragraph styling within the directions class div.

I've included a set of form controls on the recipes page. It is presented as a column just like the other recipe columns, to maintain a uniform look on the page. The form contains a radio button question and an open text area for feedback, as well as a submit button. The button won't do anything, as this isn't connected anywhere, but everything is set up so that it could be connected if wanted.